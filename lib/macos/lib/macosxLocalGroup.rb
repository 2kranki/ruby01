#!/usr/bin/env ruby
# add -debug above to debug.

# vi:nu:et:sts=4 ts=4 sw=4

#  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
#  AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
#  THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#



#----------------------------------------------------------------
#                       Global Variables
#----------------------------------------------------------------

#   IMPORTANT - Most Global Varialbles should only be defined
#   in the main script file.



#################################################################
#                       Class Definition
#################################################################

class	MacosxLocalGroup

	attr_accessor   :gid, :guid, :members, :name, :pw, :realName


    #################################################################
    #                       Methods
    #################################################################

    #----------------------------------------------------------------
    #                   Object Instantiation 
    #----------------------------------------------------------------

    def initialize( 
                gid=nil, guid=nil, name=nil, realName=nil,
                members=[]
    )
		@gid = gid
		@guid = guid
		@members = members          # user members
		@name = name
        @pw = pw
		@realName = realName
    end


    #----------------------------------------------------------------
    #               Create an instance from a Hash
    #----------------------------------------------------------------

    def self.fromHash( aHash )

        if aHash.nil? || !(aHash.is_a?(Hash))
            raise ArgumentError, 'missing or invalid Hash Dictionary'
        end

        newObj = self.new
        aHash.each do |key, value|
            newObj.instance_variable_set( "@#{key}", value )
        end
        return newObj
    end


    #----------------------------------------------------------------
    #       Create a Group from a Plist entry as generated by dscl
    #----------------------------------------------------------------

    def self.fromPlist( plistDict )

        if plistDict.nil? || !(plistDict.is_a?(Hash))
            raise ArgumentError, 'missing or invalid Plist Dictionary'
        end
        if !(plistDict[ 'dsAttrTypeStandard:RecordType' ][0] == "dsRecTypeStandard:Groups")
            raise ArgumentError, 'missing or invalid Plist Dictionary'
        end

        newObj = MacosxLocalGroup.new
        newObj.names = plistDict[ 'dsAttrTypeStandard:RecordName' ]
        if plistDict.has_key?( 'dsAttrTypeStandard:RealName' )
            newObj.realName = plistDict[ 'dsAttrTypeStandard:RealName' ][0]
        end
        newObj.gid = plistDict[ 'dsAttrTypeStandard:PrimaryGroupID' ][0]
        if plistDict.has_key?( 'dsAttrTypeStandard:GeneratedUID' )
            newObj.guid = plistDict[ 'dsAttrTypeStandard:GeneratedUID' ][0]
        end
        if plistDict.has_key?( 'dsAttrTypeStandard:Password' )
            newObj.pw = plistDict[ 'dsAttrTypeStandard:Password' ][0]
        end
        if plistDict.has_key?( 'dsAttrTypeStandard:GroupMembership' )
            newObj.members = plistDict[ 'dsAttrTypeStandard:GroupMembership' ]
        end
        return newObj
    end


    #----------------------------------------------------------------
    #               Add this Group if it does not exist.
    #----------------------------------------------------------------

    def add

        $oLog.logDebug( "MacosxLocalGroup::add( )" )

        if @name.nil? || @gid.nil?
            raise ArgumentError
        end
        if self.exists?
            raise IndexError
        end

        $oCmd.sys( "dscl localhost create /Local/Default/Groups/#{@name} gid #{@gid}", false, true )
        if !@realName.nil?
            $oCmd.sys( "dscl localhost create /Local/Default/Groups/#{@name} realname #{@realName}", false, true )
        end

    end


    #----------------------------------------------------------------
    #               Add a User to the Group membership.
    #----------------------------------------------------------------

    def addUser( userName )

        $oLog.logDebug( "MacosxLocalGroup::addUser( #{userName} )" )

        if userNname.nil?
            raise ArgumentError
        end
        if !self.exists?
            raise IndexError
        end

        $oCmd.sys( "dscl localhost merge /Local/Default/Groups/#{@name} users #{userName}", false, true )

    end


    #----------------------------------------------------------------
    #               Add this Group if it does not exist.
    #----------------------------------------------------------------

    def delete

        $oLog.logDebug( "MacosxLocalGroup::delete( )" )

        if @name.nil?
            raise ArgumentError
        end
        if !self.exists?
            raise IndexError
        end

        $oCmd.sys( "dscl localhost delete /Local/Default/Groups/#{@name}", false, true )

    end


    #----------------------------------------------------------------
    #                   see if this Group exists
    #----------------------------------------------------------------

    def exist?

        $oLog.logDebug( "MacosxLocalGroup::groupExist( )" )

        if self.groupExists?
            raise IndexError
        end

        rc = false
        iRc = $oCmd.sys( "dscl localhost read /Local/Default/Groups/#{@name}", true, true )
        if iRc == 0
            rc = true
        end

        return rc
    end


    #----------------------------------------------------------------
    #           Convert to a Plist entry as generated by dscl
    #----------------------------------------------------------------

    def toPlist

        $oLog.logDebug( "MacosxLocalGroup::toPlist )" )

        raise NotImplementedError

    end


    #----------------------------------------------------------------
    #                       get  UID 
    #----------------------------------------------------------------

    def uid

        $oLog.logDebug( "MacosxLocalGroup::uid( )" )

        if @uid.nil?
            $oCmd.cmd( "dscl localhost read /Local/Default/Groups/#{@name} GeneratedUID" )
            @uid = $oCmd.szOutput.split[1]
        end

        return @uid
    end


end




