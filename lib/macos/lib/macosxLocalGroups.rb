#!/usr/bin/env ruby
# add -debug above to debug.

# vi:nu:et:sts=4 ts=4 sw=4

#  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
#  AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
#  THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


#       dsAttrTypeStandard:AppleMetaNodeLocation
#       dsAttrTypeStandard:GeneratedUID             <= is optional
#       dsAttrTypeStandard:GroupMembers             <= GUIDs of GroupMembership elements 
#       dsAttrTypeStandard:GroupMembership          <= User IDs 
#                                                       (maybe sub-group IDs as well)
#       dsAttrTypeStandard:Password
#       dsAttrTypeStandard:PrimaryGroupID
#       dsAttrTypeStandard:RealName                 <= display name
#       dsAttrTypeStandard:RecordName               <= group name
#       dsAttrTypeStandard:RecordType
#           dsRecTypeNative:groups


#----------------------------------------------------------------
#                       Global Variables
#----------------------------------------------------------------

#   IMPORTANT - Most Global Varialbles should only be defined
#   in the main script file.

    require     "logMessages"
    require		"macosxLocalGroup"
    require     "plist"
    require     "systemCommands"


#################################################################
#                       Class Definition
#################################################################

class	MacosxLocalGroups

	attr_reader		:groups


    #################################################################
    #                       Methods
    #################################################################

    #----------------------------------------------------------------
    #                   Object Instantiation 
    #----------------------------------------------------------------

    def initialize( groupDefnsPlist=[] )
		$oLog = LogMessages.instance
		$oCmd = SystemCommands.instance
		@groups = {}
    end


    #----------------------------------------------------------------
    #               Add a Group if it does not exist.
    #----------------------------------------------------------------

    def add( gid, guid=nil, name=[], realName=nil, members=[] )

        $oLog.logDebug( "MacosxLocalGroups::add( #{name.join(',')}, #{gid}, #{realName} )" )

        if self.findByGID( gid ).nil?
            if guid.nil?
                guid = %x{uuidgen}
            end
            $oCmd.sys( "dscl localhost create /Local/Default/Groups/#{groupName} gid #{gid}", false, true )
        end

    end


    #----------------------------------------------------------------
    #               Add a Group if it does not exist.
    #----------------------------------------------------------------

    def fromMacosxPlist( groupsDefnsPlist=[] )

        $oLog.logDebug( "MacosxLocalGroups::addAllPlist( )" )

        groupsDefnsPlist.each do |groupDefn|
            if self.findByGID( groupDefn['dsAttrTypeStandard:PrimaryGroupID'] ).nil?
                group = MacosxLocalGroup.new
                group.fromPlist( groupDefn )
                if !group.exist?
                    group.add
                end
                @groups[group.gid] = group
            end
        end

    end


    #----------------------------------------------------------------
    #               Delete a Group if it exists.
    #----------------------------------------------------------------

    def delete( groupName )

        $oLog.logDebug( "MacOSXBase::groupAdd( #{groupName}, #{groupID}, #{groupPW} )" )

        if !self.groupExists?( groupName )
            rc = $oCmd.sys( "dscl localhost create /Local/Default/Groups/#{groupName} gid #{groupID}", true, true )
            if rc != 0
                return false
            end
            return true
        end
        return false

    end


    #----------------------------------------------------------------
    #           Set up from a Plist entry as generated by dscl
    #----------------------------------------------------------------

    def findByGID( gid )

        $oLog.logDebug( "MacosxLocalGroups::findByName( #{gid} )" )

        if gid.nil? || !(gid.is_a?(String))
            raise ArgumentError, 'missing or invalid Name'
        end

        foundGroup = nil
        if @groups.has_key?( gid )
            foundGroup = @groups[gid]
        end

        return foundGroup

    end


    #----------------------------------------------------------------
    #           Set up from a Plist entry as generated by dscl
    #----------------------------------------------------------------

    def findByGUID( guid )

        $oLog.logDebug( "MacosxLocalGroups::findByGID( #{guid} )" )

        if guid.nil? || !(guid.is_a?(String))
            raise ArgumentError, 'missing GUID'
        end

        foundGroup = nil
        @groups.each do |aKey,aGroup|
            if guid == aGroup.guid
                foundGroup = aGroup
                break
            end
        end

        return foundGroup
    end


    #----------------------------------------------------------------
    #           Set up from a Plist entry as generated by dscl
    #----------------------------------------------------------------

    def findByName( aName )

        $oLog.logDebug( "MacosxLocalGroups::findByName( #{aName} )" )

        if aName.nil? || !(aName.is_a?(String))
            raise ArgumentError, 'missing or invalid Name'
        end

        foundGroup = nil
        @groups.each do |aKey,aGroup|
            aGroup.names.each do |groupName|
                if aName == groupName
                    foundGroup = aGroup
                    break
                end
            end
            if !foundGroup.nil?
                break
            end
        end
        return foundGroup

    end


    #----------------------------------------------------------------
    #           Set up from a Plist entry as generated by dscl
    #----------------------------------------------------------------

    def self.fromDscl

        docText = %x{dscl -plist localhost readall /Local/Default/Groups}.strip
        plistArray = Plist::parse_xml( docText )

        newObj = MacosxLocalGroups.new
        plistArray.each do |plistEntry|
            group = MacosxLocalGroup.fromPlist( plistEntry )
            newObj.groups[group.gid] = group
        end

        return newObj
    end


    #----------------------------------------------------------------
    #           Set up from a Plist entry as generated by dscl
    #----------------------------------------------------------------

    def self.fromPlist( plistArray )

        if plistArray.nil? || !(plistArray.is_a?(Array))
            raise ArgumentError, 'missing or invalid Plist Array'
        end

        plistArray = Plist::parse_xml( plistArray )

        newObj = MacosxLocalGroups.new
        plistArray.each do |plistEntry|
            group = MacosxLocalGroup.fromPlist( plistEntry )
            newObj.groups[group.guid] = group
        end
        return newObj
    end


end




