#!/usr/bin/env ruby
# add -debug above to debug.

# vi:nu:et:sts=4 ts=4 sw=4

#  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
#  AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
#  THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#



#----------------------------------------------------------------
#                       Global Variables
#----------------------------------------------------------------

#   IMPORTANT - Most Global Varialbles should only be defined
#   in the main script file.



#################################################################
#                       Class Definition
#################################################################

class	MacosxLocalUser

	attr_accessor   :gid, :groups, :guid, :home, :name, :pw, :realName,
                    :shell


    #################################################################
    #                       Methods
    #################################################################

    #----------------------------------------------------------------
    #                   Object Instantiation 
    #----------------------------------------------------------------

    def initialize
        @gid = nil
        @groups = nil
        @guid = nil
        @home = nil
		@name = nil
		@pw = nil
		@realName = nil
        @shell = nil
        @uid = nil
    end


    #----------------------------------------------------------------
    #               Create an instance from a Hash
    #----------------------------------------------------------------

    def self.fromHash( aHash )

        $oLog.logDebug( "#{self.name}::fromHash( #{aHash} )" )

        if aHash.nil? || !(aHash.is_a?(Hash))
            raise ArgumentError, 'missing or invalid Hash Dictionary'
        end

        newObj = self.new
        aHash.each do |key, value|
            newObj.instance_variable_set( "@#{key}", value )
        end
        return newObj
    end


    #----------------------------------------------------------------
    #               Add a Group if it does not exist.
    #----------------------------------------------------------------

    def groupAdd( groupName, groupID )

        $oLog.logDebug( "MacOSXBase::groupAdd( #{groupName}, #{groupID}, #{groupPW} )" )

        if !self.groupExists?( groupName )
            rc = $oCmd.sys( "dscl . create /groups/#{groupName} gid #{groupID}", true, true )
            if rc != 0
                return false
            end
            return true
        end
        return false

    end


    #----------------------------------------------------------------
    #           Set up from a Plist entry as generated by dscl
    #----------------------------------------------------------------

    def self.fromPlist( plistDict )

        $oLog.logDebug( "MacosxLocalUser::fromPlist( #{plistDict} )" )

        if plistDict.nil? || !(plistDict.is_a?( Hash ))
            raise ArgumentError, 'missing or invalid Plist Dictionary'
        end

        newObj = MacosxLocalUser.new
        newObj.name = plistDict[ 'dsAttrTypeStandard:RecordName' ]
        if defined? plistDict[ 'dsAttrTypeStandard:RealName' ]
            newObj.realName = plistDict[ 'dsAttrTypeStandard:RealName' ]
        end
        newObj.uid = plistDict[ 'dsAttrTypeStandard:UniqueID' ]
        newObj.guid = plistDict[ 'dsAttrTypeStandard:GeneratedUID' ]
        newObj.home = plistDict[ 'dsAttrTypeStandard:NFSHomeDirectory' ]
        newObj.gid = plistDict[ 'dsAttrTypeStandard:PrimaryGroupID' ]
        if defined? plistDict[ 'dsAttrTypeStandard:Password' ]
            newObj.pw = plistDict[ 'dsAttrTypeStandard:Password' ]
        end
        return newObj
    end


    #----------------------------------------------------------------
    #                       get  UID 
    #----------------------------------------------------------------

    def uid

        $oLog.logDebug( "MacosxLocalUser::uid( )" )

        if @uid.nil?
            $oCmd.cmd( "dscl localhost read /Local/Default/Users/#{@name} GeneratedUID" )
            @uid = $oCmd.szOutput.split[1]
        end

        return @uid
    end


end


