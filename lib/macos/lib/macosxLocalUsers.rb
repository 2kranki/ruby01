#!/usr/bin/env ruby
# add -debug above to debug.

# vi:nu:et:sts=4 ts=4 sw=4

#  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
#  AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
#  THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#



#----------------------------------------------------------------
#                       Global Variables
#----------------------------------------------------------------

#   IMPORTANT - Most Global Varialbles should only be defined
#   in the main script file.

    require			"macosxLocalUser"


#################################################################
#                       Class Definition
#################################################################

class	MacosxLocalUsers

	attr_reader		:users


    #################################################################
    #                       Methods
    #################################################################

    #----------------------------------------------------------------
    #                   Object Instantiation 
    #----------------------------------------------------------------

    def initialize
		@users = nil
    end


    #----------------------------------------------------------------
    #               Add a Group if it does not exist.
    #----------------------------------------------------------------

    def add( groupName, groupID, groupPW="'*'" )

        $oLog.logDebug( "MacosxLocalUsers::add( #{groupName}, #{groupID}, #{groupPW} )" )

        if !self.groupExists?( groupName )
            rc = $oCmd.sys( "dscl localhost create /Local/Default/groups/#{groupName} gid #{groupID}", true, true )
            if rc != 0
                return false
            end
            rc = $oCmd.sys( "dscl localhost create /Local/Default/groups/#{groupName} passwd #{groupPW}", true, true )
            if rc != 0
                return false
            end
            return true
        end
        return false

    end


    #----------------------------------------------------------------
    #                       Find by Name
    #----------------------------------------------------------------

    def findByName( name )

        $oLog.logDebug( "MacosxLocalUser::plistFrom( #{plistDict} )" )

        if plistDict.nil? || !(plistDict.is_a?( array))
            raise ArgumentError, 'missing or invalid Plist Dictionary'
        end

        return false
    end


    #----------------------------------------------------------------
    #                       Find by UID
    #----------------------------------------------------------------

    def findByUID( uid )

        $oLog.logDebug( "MacosxLocalUser::plistFrom( #{plistDict} )" )

        if plistDict.nil? || !(plistDict.is_a?( array))
            raise ArgumentError, 'missing or invalid Plist Dictionary'
        end

        return false
    end


    #----------------------------------------------------------------
    #           Set up from a Plist entry as generated by dscl
    #----------------------------------------------------------------

    def self.fromPlist( plistArray )

        $oLog.logDebug( "MacosxLocalUsers::fromPlist( #{plistArray} )" )

        if plistArray.nil? || !(plistArray.is_a?( Array))
            raise ArgumentError, 'missing or invalid Plist Array'
        end

        newObj = MacosxLocalUsers.new
        plistArray.each do |plistEntry|
            user = MacosxLocalUser.fromPlist( plistEntry )
            newObj.users[user.guid] = user
        end
        return newObj
    end


    #----------------------------------------------------------------
    #           Convert to a Plist entry as generated by dscl
    #----------------------------------------------------------------

    def plistTo( plistDict )

        $oLog.logDebug( "MacosxLocalUsers::plistFrom( #{plistDict} )" )

        if plistDict.nil? || !(plistDict.is_a?( array))
            raise ArgumentError, 'missing or invalid Plist Dictionary'
        end

        return false
    end


end




